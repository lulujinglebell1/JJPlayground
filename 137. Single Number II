#include <stdio.h>
/*
137. Single Number II
Medium
Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.
Example 1:
Input: nums = [2,2,3,2]
Output: 3
Example 2:
Input: nums = [0,1,0,1,0,1,99]
Output: 99
Constraints:
1 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
Each element in nums appears exactly three times except for one element which appears once.
Follow up: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
*/
//solving method
// 1+1+1+1 = 4%3=1, 1+1+1+0=3%3=0
// 0+0+0+1 = 1%3=1. 0+0+0+0=0%3=0
//get the bit by doing ((nums[j] >> i) & 1)
//is much easier syntax and esay understand
//as you can see in C we alway have input as 
//(int* nums, int numsSize)  for input array info
//vs in C++, we have vector<int>& nums
//and we get the length from .size()

int singleNumber(int* nums, int numsSize) {

  int result = 0;
  //Line 22: Char 27: runtime error: left shift of 1 by 31 places cannot be represented in type 'int' [solution.c]
  unsigned int singleDigit = 0;

  if (numsSize == 1) {
    return nums[0];
  }

  for (int i = 0; i <= 31; i++) {
    for (int j = 0; j < numsSize; j++) {
      //(!!!important!!!((nums[j] >> i) & 1)
      singleDigit = singleDigit + ((nums[j] >> i) & 1);
    }
    singleDigit = singleDigit % 3;
    result = (singleDigit << i) + result;
    singleDigit = 0;
  }

  return result;
}


int main() {
  int nums[5] = { 4,3,3,3 };
  int numsSize = 4;
  int result;
  result = singleNumber(nums, numsSize);
  printf("single number is %d", result);
  return 0;
}
