
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>

using namespace std;


/*
225. Implement Stack using Queues
Easy
Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (push, top, pop, and empty).

Implement the MyStack class:

void push(int x) Pushes element x to the top of the stack.
int pop() Removes the element on the top of the stack and returns it.
int top() Returns the element on the top of the stack.
boolean empty() Returns true if the stack is empty, false otherwise.
Notes:

You must use only standard operations of a queue, which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue's standard operations.


Example 1:

Input
["MyStack", "push", "push", "top", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]

Explanation
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return False


Constraints:

1 <= x <= 9
At most 100 calls will be made to push, pop, top, and empty.
All the calls to pop and top are valid.


Follow-up: Can you implement the stack such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer. You can use more than two queues.


 
solving method:
->since we need to make it O(1), average O(n) for overall operation if n perfomance. and some of the operation can takes longer, so we can just make push operation longer and the other operation can be O(1) 
original
-> q1: head old-new end
-> q2:

step#1 for push (put everything from q1 to q2, and push the newer element onto q1:
-> q1: head newer end
-> q2: head old-new end
step#2: (put everything from q1 back to q2)
-> q1: head old-new-newer end
-> q2: head end

-> we use q1 as a stack, so we have to make q1 such that "q1: head old-new end" -- the new element is always at the end so whenver we do top/pop operation using queue, it only takes O(1) 
-> in order to do that, every time when there is a new element need to push to our stack q1, 
original
-> q1: head old-new end
-> q2:

step#1 for push (put everything from q1 to q2, and push the newer element onto q1):
-> q1: head newer end
-> q2: head old-new end
step#2: (put everything from q1 back to q2)
-> q1: head old-new-newer end
-> q2: head end

spent 20 mins on this after check the discussion and understand the solving method https://leetcode.com/problems/implement-stack-using-queues/discuss/989486/C%2B%2B-code%3A-two-queues
*/

class MyStack {
public:
	queue<int> q1;
	/** Initialize your data structure here. */
	MyStack() {

	}

	/** Push element x onto stack. */
	void push(int x) {
		int queue_size = q1.size();
		int tmp;
		queue <int> q2;

		for (int i = 0; i < queue_size; i++) {
			int tmp = q1.front();
			q1.pop();
			q2.push(tmp);
		}
		q1.push(x);
		for (int i = 0; i < queue_size; i++) {
			int tmp = q2.front();
			q2.pop();
			q1.push(tmp);
		}

	}

	/** Removes the element on top of the stack and returns that element. */
	int pop() {
		int result = q1.front();
		q1.pop();
		return result;
	}

	/** Get the top element. */
	int top() {
		int result = q1.front();
		return result;
	}

	/** Returns whether the stack is empty. */
	bool empty() {
		if (q1.size() == 0) {
			return true;
		}
		return false;
	}
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */

int main() {
	//Solution s;

	return 0;
}
