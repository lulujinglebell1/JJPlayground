/*
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
using namespace std;
*/


/*
Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

Example 1:

Input: s = "egg", t = "add"
Output: true

Example 2:

Input: s = "foo", t = "bar"
Output: false

Example 3:

Input: s = "paper", t = "title"
Output: true
*/

class Solution {
public:

	bool reverseIsomorphic (string s, string t) {
			map <char, char> hashmap;

			for (int i = 0; i < s.size(); i++)
			{
				//first time see this char
				if (hashmap.count(s[i]) == 0)
				{
					//if the char is the t string is seen before as a key
					if (hashmap.count(t[i]))
					{
						if (hashmap[t[i]] == t[i])
						{
							return false;
						}

					}
					hashmap[s[i]] = t[i];
				}
				//seen this char before
				else
				{
					if (hashmap[s[i]] != t[i])
					{
						return false;
					}
				}
			}
			return true;
	}

	bool isIsomorphic(string s, string t) {


		if (s.size() != t.size())
		{
			return false;
		}
		return reverseIsomorphic(s, t) & reverseIsomorphic(t, s);
	}
};


/*
int main() {
	Solution s;
	string input1 = "ab";
	string input2 = "ca";

	assert(s.isIsomorphic(input1, input2) == true);

	return 0;
}

*/
