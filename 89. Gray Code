#include <stdio.h>
#include <stdlib.h> //for malloc function
/**
89. Gray Code
Medium
The gray code is a binary numeral system where two successive values differ in only one bit.
Given an integer n representing the total number of bits in the code, return any sequence of gray code.
A gray code sequence must begin with 0.
Example 1:
Input: n = 2
Output: [0,1,3,2]
Explanation:
00 - 0
01 - 1
11 - 3
10 - 2
[0,2,3,1] is also a valid gray code sequence.
00 - 0
10 - 2
11 - 3
01 - 1


 * Note: The returned array must be malloced, assume caller calls free().
 solving method:
 refer to video:
 https://www.youtube.com/watch?v=K3_IvifT0pI
 then you know the trick to solve this problem
 problem has a Constraints: 1 <= n <= 16
 so n will not be 0, but we need to has result start with {0}
 so in the for loop we we have something to start with
 and make curIndex (result length) is not 0

   1<<0   1<<1   1<<2
 n 0 1      2       3
   0 0     00     000
     1     01     001
           11     011
           10     010
                  110
                  111
                  101
                  100
 */

int* grayCode(int n, int* returnSize) {
  //the size of the output array is 2^n
  //(!!!important!!! 2^n == 1<< n!!!)
  *returnSize = (1 << n);
  int* result = (int*)malloc((*returnSize) * sizeof(int));
  //result start with {0}
  //curIndex == result length
  int curIndex = 0;
  result[curIndex] = 0;
  curIndex++;
  int len;
  //i is for 1<<i and | with the previous results
  //so i is from 0 to n-1
  //1 <= n <= 16
  for (int i = 0; i < n; i++) {
    //loop throug the precious result and add 1 to it
    // from the bottom to the top
    len = curIndex;
    for (int j = len - 1; j >= 0; j--) {
      result[curIndex] = result[j] | (1 << i);
      curIndex++;
    }
  }
  return result;
}
int main() {
  int returnSize;
  int* result;
  result = grayCode(2, &returnSize);
  for (int i = 0; i < returnSize; i++) {
    printf("result [%d]: %d\n", i, result[i]);
  }
  return 0;
}


