
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>

using namespace std;

/*
47. Permutations II
Medium
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Constraints:
1 <= nums.length <= 8
-10 <= nums[i] <= 10

solving method:
-this question is similar too quesiton 46 Permutations I
-but this question, the input value could be duplicated
-watchted video https://www.youtube.com/watch?v=43w8tXWKSLw to understand how to solve the duplicate issue
-spent more than 1 hour on it since the duplication part is trick to understand
-should able to solve it next time within 30 mins
*/

class Solution {
public:

	void permuteTree(vector<int>& nums, vector<vector<int>>& result, vector<int>& curVector, vector<bool>& usedCheck) {

		if (curVector.size() == nums.size()) {
			result.push_back(curVector);
			return;
		}
		//everything call this function, 
		//we initilize preNum to be a value that is for sure not equal to any value in nums(!!!important!!!)
		int preNum = nums[0] - 1;

		for (int i = 0; i < nums.size(); i++) {

			//below is not working becase let says input is [112]:
			//if curVector is [1] and we call permuteTree, [11] will never generate because nums[0] == nums[1]:
			//if (i != 0 && nums[i] == nums[i-1]) {
			//	continue;
			//}

			if (usedCheck[i] == false && nums[i] != preNum) {
				//inside the for loop, we keep track of the previous value by preNum
				//(!!!important!!!)
				preNum = nums[i];

				usedCheck[i] = true;
				curVector.push_back(nums[i]);
				permuteTree(nums, result, curVector, usedCheck);
				usedCheck[i] = false;
				curVector.pop_back();
			}
		}

		return;
	}

	vector<vector<int>> permuteUnique(vector<int>& nums) {
		vector<vector<int>> result;
		vector<int> curVector;
		int totalNum = nums.size();
		vector<bool> usedCheck(totalNum);
		sort(nums.begin(), nums.end());
		permuteTree(nums, result, curVector, usedCheck);
		return result;
	}
};

int main() {
	Solution s;
	vector<vector<int>> result;
	vector<int> input = {1,1,2};
	result = s.permuteUnique(input);
	return 0;
}
