
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
using namespace std;
/*
226. Invert Binary Tree
Easy

4462

69

Add to List

Share
Invert a binary tree.

Example:

Input:

	 4
   /   \
  2     7
 / \   / \
1   3 6   9
Output:

	 4
   /   \
  7     2
 / \   / \
9   6 3   1
Trivia:
This problem was inspired by this original tweet by Max Howell:

Google: 90% of our engineers use the software you wrote (Homebrew), but you canâ€™t invert a binary tree on a whiteboard so f*** off.

Solving Method:
->You can find that you just need to continude swap the node under a given node to invert the tree 
->just pay attention not to access the NULL pointer 
->also need to pay attention that some nodes under a given node could one of them be a NULL pointer.. EX: [1 null 2] to [1 2 null]
->i spent 30mins to solve this problem
*/
struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 };


class Solution {
public:
	void swapNodeUnderGivenNode(TreeNode* inputNode) {

			//swap the node under the given node:
			TreeNode* tempNode = inputNode->right;
			inputNode->right = inputNode->left;
			inputNode->left = tempNode;

			//also need to pay attention that some nodes under a given node could one of them be a NULL pointer..EX: [1 null 2] to[1 2 null]
				
			if (inputNode->right != NULL) {
			swapNodeUnderGivenNode(inputNode->right);
			}

			 if (inputNode->left != NULL) {
				swapNodeUnderGivenNode(inputNode->left);
			}
		return;
	}

	TreeNode* invertTree(TreeNode* root) {
		if (root != NULL) {
			swapNodeUnderGivenNode(root);
		}
		return root;
	}
};


int main() {
	Solution s;
	return 0;
}
