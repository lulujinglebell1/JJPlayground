#include <iostream>
#include <vector>
using namespace std;

//[4,5,6,7,0,1,2]
// 0 1 2 3 4 5 6

class Solution {
public:
    int search(vector<int>& nums, int target) {
      int leftIndex = 0;
      int rightIndex = nums.size()-1;
      int midIndex = (rightIndex - leftIndex)/2 + leftIndex;
      int pivotIndex;
      

      //find the pivot point, at the end of while loop, the pivot will locate at the leftIndex
      while (leftIndex < rightIndex) {
        if (nums[midIndex] > nums[rightIndex]) {
          leftIndex = midIndex+1;
        } else {
          rightIndex = midIndex;
        }
        midIndex = (rightIndex - leftIndex)/2 + leftIndex;
      }
      
      pivotIndex = leftIndex;
            
      //decide which side of the array the target it located
      
      if (target >= nums[pivotIndex] && target <= nums [nums.size()-1]) {
        leftIndex = pivotIndex;
        rightIndex = nums.size()-1;
      } else {
        leftIndex = 0;
        rightIndex = pivotIndex -1;
      }
      
      //binary search on the range we define ...the <= here is important
      while (leftIndex <= rightIndex) {
        midIndex = (rightIndex - leftIndex)/2 + leftIndex;
        if (nums[midIndex] == target) {
          return midIndex;
        } else if (nums[midIndex] < target){
          leftIndex = midIndex + 1;
        }else{
          rightIndex = midIndex-1;
        }
      }
      //return -1 if not found
      return -1;
    }
};


// To execute C++, please define "int main()"
int main() {
  Solution s;
  vector<int> input = {4,5,6,7,0,1,2};
  int output;
  output = s.search(input, 0);
  printf("output %d \n", output);
  return 0;
}

