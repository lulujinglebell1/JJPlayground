
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>

using namespace std;
/*
40. Combination Sum II
Medium
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.



Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output:
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output:
[
[1,2,2],
[5]
]

Constraints:
1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30
*/


class Solution {
public:

	void combinationSumTree(vector<int>& candidates, vector<vector<int>>& result, vector<int>& curCombination, int startIndex, int target ) {
		if (target == 0) {
			result.push_back(curCombination);
			return;
		}
		if (target < 0) {
			return;
		}

		for (int i = startIndex; i < (int) candidates.size(); i++) {

			//error occur if we dont remove duplicate:
			//Input[10, 1, 2, 7, 6, 1, 5]
			//target: 8
			//Output [[1, 1, 6], [1, 2, 5], [1, 7], [1, 2, 5], [1, 7], [2, 6]]
			//Expected [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]
			if (i != startIndex && candidates[i] == candidates[i - 1]) {
				continue;
			}

			curCombination.push_back(candidates[i]);
			combinationSumTree(candidates,  result, curCombination, i + 1, target - candidates[i]);
			curCombination.pop_back();
		}
	}

	vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
		vector<vector<int>> result;
		vector<int> curCombination;
		int startIndex = 0;

		if (candidates.size() == 0) {
			return result;
		}
		//need to sort the array first:
		sort(candidates.begin(), candidates.end());
		combinationSumTree(candidates, result, curCombination, startIndex, target);
		return result;
	}
};


int main() {
	Solution s;
	vector<vector<int>> result;
	vector<int> candidates = { 10,1,2,7,6,1,5 }; //112567 10
	vector<vector<int>> TargetResult = { {1,1,6}, {1,2,5}, {1,7},{2,6} };
	int target = 8;
	result = s.combinationSum2(candidates, target);
	assert(TargetResult == result);
	return 0;
}
