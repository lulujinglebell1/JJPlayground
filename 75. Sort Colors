
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>
#include<stack>


using namespace std;
/*
75. Sort Colors
Medium
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]
Example 3:
Input: nums = [0]
Output: [0]
Example 4:
Input: nums = [1]
Output: [1]
Constraints:
n == nums.length
1 <= n <= 300
nums[i] is 0, 1, or 2.
Follow up:
Could you solve this problem without using the library's sort function?
Could you come up with a one-pass algorithm using only O(1) constant space?
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

solving method:
in order to get O(1) constant space
watch video https://www.youtube.com/watch?v=uvB-Ns_TVis
after understand the method, spent 5 mins to solve this
the triky part is no need to increment the index if we see a 2
*/

class Solution {
public:
	void sortColors(vector<int>& nums) {
		int startIndex = 0;
		int endIndex = nums.size() - 1;
		int index = 0;

		//index <= endIndex ==> if is possible that 
		//startIndex and endIndex is not changing at all
		//only index is moving along which means that 
		//most part of the array has been sorted
		while (startIndex < endIndex && index <= endIndex) {
			if (nums[index] == 0) {
				//swap with the start
				nums[index] = nums[startIndex];
				nums[startIndex] = 0;
				//since index is moving along with startIndex
				//we know what startIndex is not pointing to 0
				//becuase index would have swapped if it saw 0
				index++;
				startIndex++;
			}
			else if (nums[index] == 2) {
				//swap with end
				nums[index] = nums[endIndex];
				nums[endIndex] = 2;
				//because we cannot make sure end is not 
				//point to 2, so we could swap index=2
				//with end = 2
				//so we only increment end, and not increment
				//index, so that we can check on the next loop
				endIndex--;
			}
			else {
				//when see a 1
				index++;
			}
		}
		return;
	}
};


int main() {
	Solution s;


	return 0;
}
