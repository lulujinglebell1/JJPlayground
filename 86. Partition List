#include <stdio.h>
#include <stdlib.h> //if we want to use malloc function

/*
86. Partition List
Medium
Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.

Example 1:
Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
*/

//solving method
//today i will try and use C code to solve a link list problem
//to get myself more strong on the C fundenmental
struct ListNode {
  int val;
  struct ListNode *next;
};

struct ListNode* partition(struct ListNode* head, int x) {
  //solution said we should create 2 dummy node(smallX&largeX) to avoid conplication
  struct ListNode* smallX = (struct ListNode*)malloc(sizeof(struct ListNode));
  struct ListNode* largeX = (struct ListNode*)malloc(sizeof(struct ListNode));
  struct ListNode* curSmall = smallX;
  struct ListNode* curLarge = largeX;
  struct ListNode* curNode = head;

  while (curNode != NULL) {
    if (curNode->val < x) {
      curSmall->next = curNode;
      curSmall = curNode;
    }
    else {
      curLarge->next = curNode;
      curLarge = curNode;
    }
    curNode = curNode->next;
  }
  //now combine the two list together
  curLarge->next = NULL;
  curSmall->next = largeX->next;
  return smallX->next;
}

int main() {

  //[1,4,3,2,5,2]
  struct ListNode* node1 = (struct ListNode*)malloc(sizeof(struct ListNode));
  struct ListNode* node2 = (struct ListNode*)malloc(sizeof(struct ListNode));
  struct ListNode* node3 = (struct ListNode*)malloc(sizeof(struct ListNode));
  struct ListNode* node4 = (struct ListNode*)malloc(sizeof(struct ListNode));
  struct ListNode* node5 = (struct ListNode*)malloc(sizeof(struct ListNode));
  struct ListNode* node6 = (struct ListNode*)malloc(sizeof(struct ListNode));
  struct ListNode* result = (struct ListNode*)malloc(sizeof(struct ListNode));

  node6->val = 2;
  node6->next = NULL;
  node5->val = 5;
  node5->next = node6;
  node4->val = 2;
  node4->next = node5;
  node3->val = 3;
  node3->next = node4;
  node2->val = 4;
  node2->next = node3;
  node1->val = 1;
  node1->next = node2;

  result = partition(node1, 3);
  struct ListNode* curNode = result;

  while (curNode != NULL) {
    printf("node value: %d \n", curNode->val);
    curNode = curNode->next;
  }
  return 0;
}
