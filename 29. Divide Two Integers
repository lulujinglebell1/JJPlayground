
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>

using namespace std;

/*
29. Divide Two Integers
Medium
Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

Return the quotient after dividing dividend by divisor.

The integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.

Note:

Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For this problem, assume that your function returns 231 − 1 when the division result overflows.


Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = truncate(3.33333..) = 3.
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = truncate(-2.33333..) = -2.
Example 3:

Input: dividend = 0, divisor = 1
Output: 0
Example 4:

Input: dividend = 1, divisor = 1
Output: 1

Constraints:
-231 <= dividend, divisor <= 231 - 1
divisor != 0

Solving Method:
-> after watching video: https://www.youtube.com/watch?v=uD1Cw1JbD8E&t=265s
->spent 45 mins to solve 
->since we cannot use multiplication, division, and mod operator.
-> we have to use shift operation
-> there are 2 thing we can use to shift 1: divisor 2: 1
-> if we shift the divisor to the left by 1, it means we mutiple it by 2
-> 3: 11 --> 6: 110
-> so if dividend is 32 and divisor is 3, we need to continue to shift 3 to the left 
->until it is greater than 32, 
-> 3, 6 (3x2), 12(6x2),24(12x2), 48(24x2)
-> so now we know 3*8 = 24 is less than 32 and 32-24=8
->so we contiue do that for 8/3
case: negative dividend or divisor
case: dividend = INT32_MIN, divisor = 0
*/

class Solution {
public:
	int divide(int dividend, int divisor) {
		int sign = 1;
		int result = 0;
		int shift = 0;

		// your function returns 231 − 1 when the division result overflows.
		if (divisor == 0) {
			return INT32_MAX;
		}
		if (dividend == INT32_MIN) {
			if (divisor == -1) {
				return INT32_MAX;
			}
			// We should return here because it will overflow 
			//if we do make them positive in the folowing operation
			if (divisor == 1) {
				return INT32_MIN;
			}
		}

		long dividendLong = (long)dividend;
		long divisorLong = (long)divisor;

		//we only do positvie operation
		if (dividendLong < 0) {
			sign = -1;
			dividendLong = dividendLong * (-1);
		}
		if (divisorLong < 0) {
			//it is possible that both dividend and divisor are negative
			sign = sign * -1;
			divisorLong = divisorLong * (-1);
		}
		//main operation
		while (dividendLong >= divisorLong) {
			//need to make shift back to 0
			int shift = 0;
			//runtime error: shift exponent 32 is too large for 32-bit type 'int' 
			//so need to make divisor as long instead of int
			while (dividendLong >= (divisorLong << shift)) {
				shift++;
			}

			dividendLong = dividendLong - (divisorLong << (shift-1));
			result = result + (1 << (shift-1));
		}

		result = result * sign;
		return result;
	}
};

int main() {
	Solution s;

	return 0;
}
