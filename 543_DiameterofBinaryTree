//still has one bug need to fix..... which is the root that has the max diameter is in the middle somewhere in the tree instead of the input root

#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function

using namespace std;


/*
543. Diameter of Binary Tree
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
		  1
		 / \
		2   3
	   / \
	  4   5
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].
*/


 //Definition for a binary tree node.
  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };
 
class Solution {
public:
	int countDiameter(TreeNode* node) {
		if (node == NULL)
		{
			return -1;
		}
		//The end leaf of the tree
		if (node->right == NULL && node->left == NULL)
		{
			return 0;
		}
		else 
		{
			return (max(countDiameter(node->left) + 1, countDiameter(node->right) + 1));
		}

	}

	int diameterOfBinaryTree(TreeNode* root) {
		
		if (root == NULL)
		{
			return 0;
		}

		if (root->right == NULL && root->left != NULL)
		{
			return countDiameter(root->left) + 1;
		}
		else if (root->left == NULL && root->right != NULL)
		{
			return countDiameter(root->right) + 1;
		}
		else
		{
			return countDiameter(root->left) + countDiameter(root->right) + 2;

		}

	}
};


int main() {
	Solution s;
	return 0;
}





