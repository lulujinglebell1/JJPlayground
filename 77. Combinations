
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>
#include<stack>


using namespace std;
/*
77. Combinations
Medium
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
You may return the answer in any order.
Example 1:
Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
Example 2:
Input: n = 1, k = 1
Output: [[1]]
Constraints:
1 <= n <= 20
1 <= k <= n

solving method:
the solving method is similar with 46 & 47 Permutations
After watching video:
https://www.youtube.com/watch?v=2AzrCkRkRzc
I only spent 10 mins to solve this ~~ omg~~ just draw out the tree~~ than you know how to solve right away

*/

class Solution {
public:
	void combineHelper (int returnArraySize, vector<vector<int>>& result, vector<int>& curArray, vector<int>& fullArray, int startIndex) {
	
		if (curArray.size() == returnArraySize) {
			result.push_back(curArray);
			return;
		}
		for (int i = startIndex; i < fullArray.size(); i++) {
			curArray.push_back(fullArray[i]);
			combineHelper(returnArraySize, result, curArray, fullArray, i+1);
			curArray.pop_back();
		}
		return;
	}

	vector<vector<int>> combine(int n, int k) {
		vector<vector<int>> result;
		vector<int> fullArray;
		vector<int> curArray;
		int returnArraySize = k;

		//generate the target array 
		for (int i = 1; i <= n; i++) {
			fullArray.push_back(i);
		}

		int startIndex = 0;
		combineHelper(returnArraySize, result, curArray, fullArray, startIndex);

		return result;
	}
};

int main() {
	Solution s;
	return 0;
}
