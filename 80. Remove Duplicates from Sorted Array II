
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>
#include<stack>


using namespace std;
/*
80. Remove Duplicates from Sorted Array II
Medium
Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.
Clarification:
Confused why the returned value is an integer, but your answer is an array?
Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller.
Internally you can think of this:
// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);
// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
	print(nums[i]);
}
Example 1:
Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3]
Explanation: Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It doesn't matter what you leave beyond the returned length.
Example 2:
Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3]
Explanation: Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively. It doesn't matter what values are set beyond the returned length.
Constraints:
1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums is sorted in ascending order.

solving method:
we need two pointer to solve this problem
we need to break this problem into 4 cases
i spent 30 min to solve it myself without looking at others
*/

class Solution {
public:
	int removeDuplicates(vector<int>& nums) {
		int result = nums.size();
		if (nums.size() == 0) {
			return result;
		}
		//we can start from the 2nd interger:
		//we need kind of two pointer to keep track:
		int curIndex = 1;
		int curCount = 1;

		for (int i = 1; i < nums.size(); i++) {
			//we now on, we need to remove the duplicate
			if (curCount == 2) {
				//case#3: continue until we find new number
				if (nums[i] == nums[curIndex - 1]) {
					continue;
				}
				//case#4: we find the new number
				else {
					curCount = 1;
				}
			}
			//if we are here, it means we dont need to remove duplicate yet
			//case#2: we see an integer again:
			if (nums[i] == nums[curIndex - 1]) {
				curCount = 2;
			} // case #1: it is a new integer 
			else {
				curCount = 1;
			}
			//for case 1,2,3 we all need to do the following:
			nums[curIndex] = nums[i];
			curIndex++;

		}
		result = curIndex;
		return result;
	}
};

int main() {
	Solution s;

	return 0;
}
