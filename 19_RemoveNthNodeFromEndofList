
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
using namespace std;


/*
19. Remove Nth Node From End of List

Given a linked list, remove the n-th node from the end of list and return its head.

Example:

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:

Given n will always be valid.

Follow up:

Could you do this in one pass?
*/


// Definition for singly-linked list.
struct ListNode {
     int val;
     ListNode *next;
     ListNode(int x) : val(x), next(NULL) {}
 };
 

class Solution {
public:
	ListNode* removeNthFromEnd(ListNode* head, int n) {
		unordered_map <int, ListNode*> listTable;
		ListNode* curNode = head;
		ListNode* removeNode;
		ListNode* previousNode;

		int nodeIndex = 1;

		if ((head == NULL) || (head->next == NULL && n == 1))
		{
			return NULL;
		}

		while (curNode != NULL)
		{
			listTable[nodeIndex] = curNode;
			nodeIndex++;
			curNode = curNode->next;
		}

		removeNode = listTable[nodeIndex - n];
		if (removeNode == head)
		{
			return head->next;
		}

		previousNode = listTable[nodeIndex - n - 1];
		previousNode->next = previousNode->next->next;
		return head;
	}
};

int main() {
	Solution s;


	return 0;
}





