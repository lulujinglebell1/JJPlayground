
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>
#include<stack>


using namespace std;
/*
74. Search a 2D Matrix
Medium
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

solving method:
this is a very good question for binary search practise!!!
		//(!!!important note for binary search!!!)
		//the while condition can not be while (startRow < endRow) becuase
		//startRow = 0, endRow = 1, midRow = 0 ===> this can cause infiniy loop
i spent 60+ to solve this becuase i did not well consider the while condition!!

*/

class Solution {
public:
	int searchMatrixOutputTargetRow(vector<vector<int>>& matrix, int target) {
		//output -1 if the qulified row does not exist:
		int targetRowOutput = -1;
		int startRow = 0;
		int endRow = matrix.size() - 1;
		int midRow = (startRow + endRow) / 2;
		
		//(!!!important note for binary search!!!)
		//this while condition can not be while (startRow < endRow) becuase 
		//startRow = 0, endRow = 1, midRow = 0 ===> this can cause infiniy loop
		while (startRow + 1 < endRow) {
			if (target < matrix[midRow][0]) {
				endRow = midRow;
			}
			else if (target > matrix[midRow][0]) {
				startRow = midRow;
			}
			else {
				return midRow;
			}
			midRow = (startRow + endRow) / 2;
		}

		//now startRow + 1 = endRow or startRow==endRow
		if (target >= matrix[startRow][0] && target <= matrix[startRow][matrix[startRow].size()-1]) {
			return startRow;
		}
		if (target >= matrix[endRow][0] && target <= matrix[endRow][matrix[endRow].size() - 1]) {
			return endRow;
		}
		return targetRowOutput;
	}

	bool searchMatrixCheckTargetRow(vector<vector<int>>& matrix, int target, int qualifiedRow) {
		bool found = false;

		int startCol = 0;
		int endCol = matrix[qualifiedRow].size() - 1;
		int midCol = (startCol + endCol) / 2;
		// this is to avoid infity loop
		while (startCol + 1 < endCol) {
			if (target < matrix[qualifiedRow][midCol]) {
				endCol = midCol;
			}
			else if (target > matrix[qualifiedRow][midCol]) {
				startCol = midCol;
			}
			else {
				return true;
			}
			midCol = (startCol + endCol) / 2;
		}

		//now startCol + 1 ==endCol or startCol==endCol
		if (target == matrix[qualifiedRow][startCol]) {
			return true;
		}
		if (target == matrix[qualifiedRow][endCol]) {
			return true;
		}
		return found;
	}


	bool searchMatrix(vector<vector<int>>& matrix, int target) {

		bool result = false;
		int qualifiedRow = -1;
		//binary search and see if the qulified row exist:
		qualifiedRow = searchMatrixOutputTargetRow(matrix, target );

		if (qualifiedRow == -1) {
			return result;
		}
			
		return searchMatrixCheckTargetRow(matrix, target, qualifiedRow);

	}
};

int main() {
	Solution s;
	vector<vector<int>> matrix = {{1, 3, 5, 7}, { 10, 11, 16, 20 }, { 23, 30, 34, 60 }};
	vector<vector<int>> matrix1 = { {1, 3}};
	vector<vector<int>> matrix2 = {{1},{3}};


	bool result2;
	bool result1;

	int target = 3;

	result2 = s.searchMatrix(matrix2, target);
	result1 = s.searchMatrix(matrix1, target);

	return 0;
}
