
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>

using namespace std;

/*
62. Unique Paths
Medium
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?

Example 1:
Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
Example 3:
Input: m = 7, n = 3
Output: 28
Example 4:
Input: m = 3, n = 3
Output: 6

Solving method:
After watch and understand video:
https://www.youtube.com/watch?v=fmpP5Ll0Azc
I spent 30min to solve this question ~~
Very good logical and recursive thinking question~~

*/

class Solution {
public:

	int uniquePathsHelper (int m, int n, vector<vector<int>> & pathSum) {
		//start from (00)
		//when out of boundry then return 0:
		if (m < 0 || n < 0) {
			return 0;
		}
		if (m == 0 && n == 0) {
			return 1;
		}
		if (pathSum[m][n] > 0) {
			return pathSum[m][n];
		}
		//the possible way to the current (mn)position is equal to 
		//sum of the way to top+left possition
		int leftPathSum = uniquePathsHelper(m, n-1, pathSum);
		int topPathSum = uniquePathsHelper(m-1, n, pathSum);
		pathSum[m][n] = leftPathSum + topPathSum;

		return pathSum[m][n];
	}

	int uniquePaths(int m, int n) {
		vector<vector<int>> pathSum(m, vector<int>(n));
		int result = uniquePathsHelper(m-1, n-1, pathSum);
		return result;
	}
};

int main() {
	Solution s;
	s.uniquePaths(3, 2);
	return 0;
}
