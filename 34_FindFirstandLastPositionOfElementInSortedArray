
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
using namespace std;


/*
34. Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
*/

class Solution {
public:

	void search(vector<int>& nums, int leftMostIndex, int rightMostIndex, int target, vector<int>& output)
	{
		int middleIndex = (rightMostIndex - leftMostIndex) / 2 + leftMostIndex;
		if (leftMostIndex > rightMostIndex)
		{
			return;
		}
		else
		{
			if (nums[middleIndex] == target)
			{
				if (middleIndex <= output[0] || output[0] == -1)
				{
					output[0] = middleIndex;
				}
				if (middleIndex >= output[1] || output[0] == -1)
				{
					output[1] = middleIndex;
				}
				search(nums, middleIndex+1, rightMostIndex, target, output);
				search(nums, leftMostIndex, middleIndex-1, target, output);
			}
			if (nums[middleIndex] < target)
			{
				search(nums, middleIndex+1, rightMostIndex, target, output);
			}
			if (nums[middleIndex] > target)
			{
				search(nums, leftMostIndex, middleIndex-1, target, output);
			}
		}
		return;
	}

	vector<int> searchRange(vector<int>& nums, int target) {
		int leftMostIndex = 0;
		int rightMostIndex = nums.size() - 1;
		vector<int> output = {-1, -1};

		if (nums.size() == 0)
		{
			return output;
		}
		else
		{
			search(nums, leftMostIndex, rightMostIndex, target, output);
		}
		return output;
	}
};

int main() {
	Solution s;
	vector<int> input = {5,7,7,8,8,10};
	vector<int> output;
	int target = 8;
	output = s.searchRange(input, target);
	return 0;
}





