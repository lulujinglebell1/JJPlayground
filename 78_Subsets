#include <iostream>
#include <vector>
using namespace std;
/*
Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]*/

//we can create a mask and do & bit operation with the input
//if mask=1, then push to the output
//mask when totalNum = 3:
/*
0:000
1:001
2:010
3:011
4:100
5:101
6:110
7:111
*/

vector<vector<int>> subsets(vector<int>& nums) {

  vector<vector<int>> result;
  int totalNum = nums.size();
  //total output will be 2 power of n (2^totalNum) which is equal to 2^totalNum = 1<<totalNum, so we need to loop (1<<totalNum) times
  for (int mask = 0; mask < (1<<totalNum); mask++) {
    
    //need to generate each subOutput vector
    //create this vector inside the for loop, so each time a for loop is done, the vector will disappear
    vector<int> subOutputVector;

    //need to loop for totalNum times, if mask=1, then push the value to the subOutputVector;
    for (int j = 0; j < totalNum; j++) {
      //if mask == 1 for the current position j, then push the value back 
      if (mask & (1<<j))
        subOutputVector.push_back(nums[j]);
    }
    result.push_back(subOutputVector);
  }
  return result;
}

// To execute C++, please define "int main()"
int main() {

  vector<int> nums = {1,2,3};
  vector<vector<int>> result;
  result = subsets (nums);
  
  for (int i = 0; i < (int)result.size(); i++)
  {
    for (int j = 0; j < (int)result[i].size(); j++) {
      printf("%d", result[i][j]);
    }
    printf("\n");
  }
  return 0;
}
