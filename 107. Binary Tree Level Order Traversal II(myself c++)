#include <iostream>
#include <vector>
#include <algorithm>    // std::sort
#include <queue>

using namespace std;


// Definition for a binary tree node.
struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 };


class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
      vector<vector<int>> result;
      queue<TreeNode*> node_queue;
      vector<vector<int>> final_result;


      if (root == NULL) {
        return result;
      }
      
      node_queue.push(root);
      while (node_queue.empty()==false){
        //queue_size is the total number of nodes on the same level
        int queue_size = (int)node_queue.size();
        vector<int> cur_result;

        for (int i = 0; i < queue_size; i++) {
          
          cur_result.push_back(node_queue.front()->val);

          if((node_queue.front())->left != NULL) {
            node_queue.push((node_queue.front())->left);
          }
          if((node_queue.front())->right != NULL) {
            node_queue.push((node_queue.front())->right);
          }
          node_queue.pop();
        }
        result.push_back(cur_result);
      }
      
      for(int i = result.size()-1; i>=0; i--){
        final_result.push_back(result[i]);
      }
      return final_result;
    }
};
