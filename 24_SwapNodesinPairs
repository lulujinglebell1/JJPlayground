
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
using namespace std;


/*
24. Swap Nodes in Pairs
Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.
Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.
*/


//Definition for singly-linked list.
struct ListNode {
     int val;
     ListNode *next;
     ListNode(int x) : val(x), next(NULL) {}
 };


class Solution {
public:
	ListNode* swapPairs(ListNode* head) {
		ListNode* curNode = head;
		ListNode* nextNode = head;
		ListNode* firstNode = head;
		ListNode* secondNode = head;
		bool swapFlag = false;

		if (head == NULL)
		{
			return NULL;
		}
		if (head->next == NULL)
		{
			return head;
		}

		while (nextNode != NULL)
		{
			curNode = nextNode;
			if (swapFlag == false)
			{
				if (curNode->next == NULL)
				{
					//reach the end of the list
					secondNode->next = curNode;
					break;
				}
				else
				{
					//strore node for the next swap
					nextNode = curNode->next;
					firstNode = secondNode;
					secondNode = curNode;
				}
			}
			else
			{
				//swap the nodes
				nextNode = curNode->next;
				firstNode->next = curNode;
				curNode->next = secondNode;
				secondNode->next = nextNode;
				//store the node for the next swap
				firstNode = curNode;

				if (secondNode == head)
				{
					head = firstNode;
				}
			}
			swapFlag = swapFlag ^ 1;
		}
		return head;
	}
};


int main() {
	Solution s;
	ListNode* head = new ListNode(1);
	ListNode* node1 = new ListNode(2);
	ListNode* node2 = new ListNode(3);
	//ListNode* node3 = new ListNode(4);
	head->next = node1;
	node1->next = node2;
	node2->next = NULL;

	s.swapPairs(head);
	return 0;
}





