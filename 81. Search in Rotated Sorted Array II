
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>
#include<stack>


using namespace std;
/*
81. Search in Rotated Sorted Array II
Medium
You are given an integer array nums sorted in ascending order (not necessarily distinct values), and an integer target.
Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,4,4,5,6,6,7] might become [4,5,6,6,7,0,1,2,4,4]).
If target is found in the array return its index, otherwise, return -1.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Constraints:
1 <= nums.length <= 5000
-104 <= nums[i] <= 104
nums is guaranteed to be rotated at some pivot.
-104 <= target <= 104
Follow up: This problem is the same as Search in Rotated Sorted Array, where nums may contain duplicates. Would this affect the run-time complexity? How and why?

solving method:
Follow up: This problem is the same as Search in Rotated Sorted Array, where nums may contain duplicates. Would this affect the run-time complexity? How and why?
here is the different:
because there is duplicate number, so if we use the same method  as problem "33 Search in Rotated Sorted Array" we might not able to find the pivod point:
input:[1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1]
target:2
i tried copied the solution for "33 Search in Rotated Sorted Array II" solution #2 and this will return false instead of true
becasue with solution #2, even start ++ cannot help us to find the pivot point!
so I refer to solution #3 of "33 Search in Rotated Sorted Array II" to solve this problem
and use start ++ to handle the duplicate cases!! moving start point, we will eventuallly reach the point where start != mid or mid != end~~
i spent more than 60 to solve becuase i spent some time to understand the solving method
*/

class Solution {
public:
	bool search(vector<int>& nums, int target) {
		int startIndex = 0;
		int endIndex = nums.size() - 1;
		//we can do midIndex = (startIndex + endIndex) /2
		//but this can cause overflow~~, so we do below instead
		int midIndex;

		while (startIndex + 1 < endIndex) {
			midIndex = startIndex + (endIndex - startIndex) / 2;
			if (target == nums[midIndex]) return true;

			//only focus on the relationship between nums[midIndex] and nums[startIndex]
			if (nums[midIndex] > nums[startIndex]) {
				if (target < nums[midIndex] && target >= nums[startIndex]) {
					endIndex = midIndex - 1;
				}
				else {
					startIndex = midIndex + 1;
				}
			}
			else if (nums[midIndex] < nums[startIndex]) {
				if (nums[midIndex] < target   && target <= nums[endIndex]) {
					startIndex = midIndex + 1;
				}
				else {
					endIndex = midIndex - 1;
				}
			}
			else {
				//if we reach here, it means nums[startIndex] = nums[midIndex]
				startIndex++;
			}
		}
		if (target == nums[startIndex] || target == nums[endIndex]) return true;

		return false;
	}
};

int main() {
	Solution s;
	vector <int> input = { 2,2,2,3,2,2,2 };
	int target = 3;
	s.search(input, target);
	return 0;
}
