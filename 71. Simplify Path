
#include<iostream>
#include<assert.h>
#include<string>
#include<map>
#include<vector>
#include<algorithm> //for max function
#include<unordered_map>
#include<queue>
#include<stack>


using namespace std;
/*
71. Simplify Path
Medium
Given an absolute path for a file (Unix-style), simplify it. Or in other words, convert it to the canonical path.
In a UNIX-style file system, a period '.' refers to the current directory. Furthermore, a double period '..' moves the directory up a level.
Note that the returned canonical path must always begin with a slash '/', and there must be only a single slash '/' between two directory names. The last directory name (if it exists) must not end with a trailing '/'. Also, the canonical path must be the shortest string representing the absolute path.
Example 1:
Input: path = "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.
Example 2:
Input: path = "/../"
Output: "/"
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
Example 3
Input: path = "/home//foo/"
Output: "/home/foo"
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.
Example 4:
Input: path = "/a/./b/../../c/"
Output: "/c"
Constraints:
1 <= path.length <= 3000
path consists of English letters, digits, period '.', slash '/' or '_'.
path is a valid Unix path.

Solving method:
Watch video:https://www.youtube.com/watch?v=l-og2X5GibY
To understand the solving method
Detail solving method can refer to step #123
Special case needed to be consider
Good problem to practise more, i spent more than 1 hour to solve

*/


class Solution {
public:
	string simplifyPath(string path) {
		string result;
		vector<string> singalDirectory;
		string curSting;
		stack<string> directoryStack;
		//step#1: split the path by '/' and put all the string into a vector
		for (int i = 0; i < path.size(); i++) {
			
			if (path[i] != '/') {
				curSting.push_back(path[i]);
			}
			else
			{
				//for the path[0] and path[1], it could be '/'
				if (curSting.size() != 0) {
					singalDirectory.push_back(curSting);
					curSting.erase(curSting.begin(), curSting.end());
				}
			}
		}
		//case:"/a//b////c/d//././/.."
		//push the last directory ".." to the stack
		if (curSting.size() != 0) {
			singalDirectory.push_back(curSting);
			curSting.erase(curSting.begin(), curSting.end());
		}
		//step#2: push each of the singalDirectory to stack
		//if singalDirectory=".", then ignore it
		//if singalDirectory=="..", then pop the last from stack
		for (int i = 0; i < singalDirectory.size(); i++) {
			if (singalDirectory[i] == ".") {
				continue;
			}
			else if (singalDirectory[i] == "..") {
				if (directoryStack.empty() == false) {
					directoryStack.pop();
				}
			}
			else {
				directoryStack.push(singalDirectory[i]);
			}
		}
		// special case "/../", "/", "/./" etc
		if (directoryStack.empty() == true) {
			return "/";
		}
		//step#3:
		//pop all the directory out and generate the result
		while (directoryStack.empty() == false) {
			string topDirectory = directoryStack.top();
			result = "/" + topDirectory + result;
			directoryStack.pop();
		}
		return result;
	}
};

int main() {
	Solution s;
	string path = "/c/d//././/..";
		string result;
	result = s.simplifyPath(path);

	return 0;
}
